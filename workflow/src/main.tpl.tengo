wf := import("@platforma-sdk/workflow-tengo:workflow")

maps := import("@platforma-sdk/workflow-tengo:maps")
ll := import("@platforma-sdk/workflow-tengo:ll")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
metadata := import(":metadata")
smart := import("@platforma-sdk/workflow-tengo:smart")
assets := import("@platforma-sdk/workflow-tengo:assets")

prerunTpl := assets.importTemplate(":prerun")

dsFasta := import(":ds-fasta")
dsFastq := import(":ds-fastq")
dsMultilaneFastq := import(":ds-multilane-fastq")
dsTaggedFastq := import(":ds-tagged-fastq")
dsXsv := import(":ds-xsv")
dsTaggedXsv := import(":ds-tagged-xsv")
dsBulkCountMatrix := import(":ds-bulk-count-matrix")

dsProcessors := {
	"Fasta": dsFasta,
	"Fastq": dsFastq,
	"MultilaneFastq": dsMultilaneFastq,
	"TaggedFastq": dsTaggedFastq,
	"Xsv": dsXsv,
	"TaggedXsv": dsTaggedXsv,
	"BulkCountMatrix": dsBulkCountMatrix
}

wf.setPreRun(prerunTpl)

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	sampleIdAxis := {
		type: "String",
		name: "pl7.app/sampleId",
		annotations: { "pl7.app/label": "Sample" },
		domain: { "pl7.app/blockId": blockId }
	}

	groupIdAxis := {
		type: "String",
		name: "pl7.app/sampleGroupId",
		annotations: { "pl7.app/label": "Sample Group" },
		domain: { "pl7.app/blockId": blockId }
	}

	exports := pframes.pFrameBuilder()
	
	// Create metadata
	
	for k, v in metadata.createMetadata(args, blockId, sampleIdAxis, groupIdAxis) {
		exports.add(k, v.spec, v.data)
	}

	// Create datasets

	fileImports := {}

	// Import file function; avoid re-importing the same file
	importFile := func(importHandle) {
		fromMap := fileImports[importHandle]
		if fromMap == undefined {
			fImport := file.importFile(importHandle)
			fileImports[importHandle] = fImport
			return fImport.file
		} else {
			return fromMap.file
		}
	}

	blockTitle := args.blockTitle
	if is_undefined(blockTitle) {
		blockTitle = "Samples & Data"
	}

	for _, dataset in args.datasets {
		proc := dsProcessors[dataset.content.type]
		if is_undefined(proc) {
			ll.panic("Unknown dataset type %v", dataset.content.type)
		}

		trace := pSpec.makeTrace(undefined,
			{type: "milaboratories.samples-and-data", id: blockId, importance: 10, label: blockTitle},
			{type: "milaboratories.samples-and-data/dataset", id: dataset.id, importance: 100, label: dataset.label}
		)		
		
		ds := undefined 
		if proc.isGrouped {
			ds = proc.createDataset(blockId, sampleIdAxis, groupIdAxis, dataset, importFile)
		} else {
			ds = proc.createDataset(blockId, sampleIdAxis, dataset, importFile)
		}
		for k, v in ds {
			exports.add(k, trace.inject(v.spec), v.data)
		}
	}

	return {
		outputs: {
			fileImports: maps.mapValues(fileImports, func(im) {
				return im.handle
			})
		},
		exports: {
			pf: exports.build()
		}
	}
})
