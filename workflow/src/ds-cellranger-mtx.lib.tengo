
ll := import("@platforma-sdk/workflow-tengo:ll")
pColumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
json := import("json")
util := import(":util")

export {
    isGrouped: false,
    
    createDataset: func(blockId, sampleIdAxis, dataset, importFile) {
        compression := dataset.content.gzipped ? "gz" : "none"
        
        spec := util.datasetColumnSpecBase(blockId, dataset, "")
        spec.domain["pl7.app/compression"] = compression

        cellRangerFileRoleAxisSpec := {
            type: "String",
            name: "pl7.app/sc/cellRangerFileRole",
            annotations: {
                "pl7.app/label": "Role"
            },
            domain: {
                "pl7.app/cellRangerMtxRoles": string(json.encode(dataset.content.roles))
            }
        }

        spec.axesSpec = [sampleIdAxis, cellRangerFileRoleAxisSpec]

        data := pColumn.resourceMapBuilder(2)
        for sampleId, fileGroup in dataset.content.data {
            for _, role in dataset.content.roles {
                importHandle := fileGroup[role]
                if !importHandle {
                    ll.panic("File handle not set for %v in sample %v", role, sampleId)
                }
                data.add([sampleId, role], importFile(importHandle))
            }
        }

        result := {}
        result["dataset." + dataset.id] = {
            spec: spec,
            data: data.build()
        }

        return result
    }
}

